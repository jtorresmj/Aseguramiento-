pipeline {
    agent any
    
    environment {
        // Variables de entorno para las pruebas de API
        BAGISTO_BASE_URL = "${env.BAGISTO_BASE_URL ?: 'http://localhost:8000'}"
        BAGISTO_CUSTOMER_EMAIL = credentials('bagisto-test-email')
        BAGISTO_CUSTOMER_PASSWORD = credentials('bagisto-test-password')
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo 'Obteniendo código del repositorio...'
                checkout scm
            }
        }
        
        stage('Preparar Entorno') {
            steps {
                echo 'Instalando Newman (Postman CLI) y preparando directorios...'
                sh '''
                    npm install -g newman newman-reporter-htmlextra
                    newman --version
                    mkdir -p test-results
                '''
            }
        }
        
        stage('Run API Tests') {
            steps {
                echo 'Ejecutando pruebas funcionales de API con Newman...'
                sh '''
                    chmod +x jenkins/run-postman-tests.sh
                    ./jenkins/run-postman-tests.sh
                '''
            }
        }
        
        stage('Prueba de Estrés') {
            steps {
                echo 'Ejecutando prueba de estrés de la API...'
                sh '''
                    newman run postman/Bagisto_API_Collection.postman_collection.json \
                    -e postman/Bagisto_Environment.postman_environment.json \
                    --env-var "base_url=${BAGISTO_BASE_URL}" \
                    --env-var "customer_email=${BAGISTO_CUSTOMER_EMAIL}" \
                    --env-var "customer_password=${BAGISTO_CUSTOMER_PASSWORD}" \
                    --iteration-count 100 \
                    --delay-request 100 \
                    -r cli,junit,htmlextra \
                    --reporter-junit-export test-results/stress-test-results.xml \
                    --reporter-htmlextra-export test-results/stress-test-report.html \
                    --color on \
                    --timeout-request 10000
                '''
            }
        }
    }
    
    post {
        always {
            echo 'Publicando resultados de pruebas...'
            
            // Publicar resultados JUnit (pruebas funcionales y de estrés)
            junit 'test-results/*.xml'
            
            // Publicar reporte HTML de pruebas funcionales
            publishHTML([
                allowMissing: false,
                alwaysLinkToLastBuild: true,
                keepAll: true,
                reportDir: 'test-results',
                reportFiles: 'api-test-report.html',
                reportName: 'API Functional Tests',
                reportTitles: 'Bagisto API Tests'
            ])
            
            // Publicar reporte HTML de pruebas de estrés
            publishHTML([
                allowMissing: false,
                alwaysLinkToLastBuild: true,
                keepAll: true,
                reportDir: 'test-results',
                reportFiles: 'stress-test-report.html',
                reportName: 'API Stress Test Report',
                reportTitles: 'Bagisto API Stress Tests'
            ])
        }
        
        success {
            echo '✓ Pipeline completado exitosamente'
            echo '  - Pruebas funcionales: PASADAS'
            echo '  - Pruebas de estrés (100 iteraciones): COMPLETADAS'
            // Aquí puedes agregar notificaciones (Slack, email, etc.)
        }
        
        failure {
            echo '✗ Pipeline falló'
            echo 'Revisa los reportes HTML para más detalles'
            // Aquí puedes agregar notificaciones de fallo
        }
    }
}

